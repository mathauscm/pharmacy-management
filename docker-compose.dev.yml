version: '3.8'

services:
  # Backend Node.js - Desenvolvimento
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: myfarm-backend-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=pharmacy_db
      - DB_USER=postgres
      - DB_PASSWORD=pharmacy_password
      - CORS_ORIGIN=http://localhost:5173
    volumes:
      - ./backend:/app
      - ./backend/node_modules:/app/node_modules
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - myfarm-network
    command: npm run dev

  # Banco de dados PostgreSQL - Desenvolvimento
  postgres:
    image: postgres:15-alpine
    container_name: myfarm-postgres-dev
    environment:
      POSTGRES_DB: pharmacy_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pharmacy_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/src/models/database.sql:/docker-entrypoint-initdb.d/01-init.sql
    restart: unless-stopped
    networks:
      - myfarm-network

  # Frontend React - Desenvolvimento
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: myfarm-frontend-dev
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000/api
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - myfarm-network
    command: npm run dev

volumes:
  postgres_dev_data:
    driver: local

networks:
  myfarm-network:
    driver: bridge